# -*- coding: utf-8 -*-
"""RandForrest_SalesPrediction-MC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SaKEoUjMJcXVcP2J8QCk_R8KDh3qWjPJ
"""

from dateutil.parser import parse
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
plt.rcParams.update({'figure.figsize': (10, 7),'figure.dpi': 120})
import statsmodels.api as sm
from statsmodels.formula.api import ols
from sklearn.model_selection import train_test_split
import plotly.express as px



# finalize model and make a prediction with random forest
from numpy import asarray
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.ensemble import RandomForestRegressor

	# transform a time series dataset into a supervised learning dataset
def basic(string):	
	def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
		n_vars = 1 if type(data) is list else data.shape[1]
		df = DataFrame(data)
		cols = list()
		# input sequence (t-n, ... t-1)
		for i in range(n_in, 0, -1):
			cols.append(df.shift(i))
		# forecast sequence (t, t+1, ... t+n)
		for i in range(0, n_out):
			cols.append(df.shift(-i))
		# put it all together
		agg = concat(cols, axis=1)
		# drop rows with NaN values
		if dropnan:
			agg.dropna(inplace=True)
		return agg.values

	# load the dataset
	series = pd.read_excel(r'MC_SKUWise.xlsx')
	series= series.loc[series['Product'] == string]
	series = series.drop('Product', axis=1)

	bins=[]

	for i in range(0,800000,1000):
		bins.append(i)

	bins[0]=-1
	bins

	label=[]

	for j in range(1,800):
		label.append(j)



	series['Count']= pd.cut(series['Count'],bins,labels=label)

	values = series.values

	# transform the time series data into supervised learning
	train = series_to_supervised(values, n_in=12)

	# split into input and output columns
	trainX, trainy = train[:, :-3], train[:, -1]
	# fit model
	model = RandomForestRegressor(n_estimators=3000)
	model.fit(trainX, trainy)
	# construct an input for a new prediction
	row = values[-12:].flatten()
	original=values[-12:]

	# make a one-step prediction
	yhat = model.predict(asarray([row]))
	yhat=round(yhat[0]*1000,-3)
	yhat="Prediction for next month: "+ str(yhat) + " MC"
	return yhat
	# print('Input:\n %s \n\n Prediction for next month: %.f MC' % (original, round(yhat[0]*1000,-3)))

